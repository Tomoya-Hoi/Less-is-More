//Á´ã„Å°‰∏ä„Åí‰ΩúÊ•≠
osql.requireLogin();

window.addEventListener("DOMContentLoaded", () => {
  const userId = sessionStorage.getItem("user_id");
  const userField = document.getElementById("user_id_display");
  const submitBtn = document.getElementById("submitBtn");

  if (userId) {
    userField.value = userId;
    submitBtn.disabled = false;
  } else {
    userField.value = "„É≠„Ç∞„Ç§„É≥„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì";
    submitBtn.disabled = true;
  }
});


//„É°„Ç§„É≥Âá¶ÁêÜ
function submitButtonPressed() {
    main();
}

async function main() {
  console.log("main");

  const formData = getFormDataById({
    userId: "user_id_display",
    title: "title",
    content: "content",
    tag: "tag"
  });

  const cleaned = cleanData(formData);
  const tagId = await ensureTagExists(cleaned.tag);

  const sqls = generateSQL({
    ...cleaned,
    tag: tagId // „Çø„Ç∞Âêç„Çí„Çø„Ç∞ID„Å´ÁΩÆ„ÅçÊèõ„Åà„Å¶Ê∏°„Åô
  });

  // üîß SQL„ÇíÁµêÂêà„Åó„Å¶‰∏ÄÊã¨ÂÆüË°åÔºà„Åì„Çå„ÅßLAST_INSERT_ID„ÅåÊúâÂäπÔºâ
  const combinedSQL = sqls.join('\n');
  await osql.connect(combinedSQL);

  alert("ÊäïÁ®ø„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ");
}



function getFormDataById(mapping) {
  console.log("getFormDataById()");

  const object = {};
  for (const [key, id] of Object.entries(mapping)) {
    object[key] = document.getElementById(id).value;
  }

  console.log(object);
  return object;
}

async function ensureTagExists(tagName) {
  const esc = (str) => str.replace(/'/g, "''");
  const escapedTag = esc(tagName);

  // „Çø„Ç∞„ÅåÂ≠òÂú®„Åó„Å™„Åë„Çå„Å∞ËøΩÂä†
  const insertSQL = `INSERT IGNORE INTO tags (name) VALUES ('${escapedTag}');`;
  await osql.connect(insertSQL);

  // „Çø„Ç∞ID„ÇíÂèñÂæó
  const selectSQL = `SELECT id FROM tags WHERE name = '${escapedTag}';`;
  const res = await osql.connect(selectSQL);

  if (res.length > 0) {
    return res[0].id;
  } else {
    throw new Error("„Çø„Ç∞ID„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
  }
}

function cleanData(data) {
  console.log("cleanData()");

  const cleaned = {};
  for (const [key, value] of Object.entries(data)) {
    if (typeof value === "string") {
      cleaned[key] = value.trim(/\s+/g, '');
    } else {
      cleaned[key] = value;
    }
  }

  console.log(cleaned);
  return cleaned;
}

function generateSQL(data) {
  console.log("generateSQL()");
  
  const esc = (str) => str.replace(/'/g, "''"); // „Ç∑„É≥„Ç∞„É´„ÇØ„Ç©„Éº„Éà„ÅÆ„Ç®„Çπ„Ç±„Éº„Éó
  
  const userId = esc(data.userId);
  const title = esc(data.title);
  const content = esc(data.content);
  const tag = esc(data.tag);
  
  const resourceSql = `
    INSERT INTO resources (user_id, title, content)
    VALUES ('${userId}', '${title}', '${content}');
  `;
  
  const tagSql = `
    INSERT INTO resource_tag_map (resource_id, tag_id)
    VALUES (LAST_INSERT_ID(), '${tag}');
  `;
  
  const lst = [resourceSql.trim(), tagSql.trim()]; 

  console.log(lst);
  return lst;
}

async function doSQL(lst) {
  console.log("doSQL()");

  const results = [];
  for (const sql of lst) {
    const result = await osql.connect(sql);
    results.push(result);
  }

  console.log("result = ", results);
  return results;
}

